# vi: set sw=4 ts=4:

=head1 NAME

BusyBox - The Swiss Army Knife of Embedded Linux

=head1 SYNTAX

 busybox <applet> [arguments...]  # or

 <applet> [arguments...]	  # if symlinked

=head1 DESCRIPTION

BusyBox combines tiny versions of many common UNIX utilities into a single
small executable. It provides minimalist replacements for most of the utilities
you usually find in GNU coreutils, util-linux, etc. The utilities in BusyBox
generally have fewer options than their full-featured GNU cousins; however, the
options that are included provide the expected functionality and behave very
much like their GNU counterparts.

BusyBox has been written with size-optimization and limited resources in mind.
It is also extremely modular so you can easily include or exclude commands (or
features) at compile time. This makes it easy to customize your embedded
systems. To create a working system, just add /dev, /etc, and a Linux kernel.
BusyBox provides a fairly complete POSIX environment for any small or embedded
system.

BusyBox is extremely configurable.  This allows you to include only the
components you need, thereby reducing binary size. Run 'make config' or 'make
menuconfig' to select the functionality that you wish to enable.  Then run
'make' to compile BusyBox using your configuration.

After the compile has finished, you should use 'make install' to install
BusyBox. This will install the 'bin/busybox' binary, in the target directory
specified by CONFIG_PREFIX. CONFIG_PREFIX can be set when configuring BusyBox,
or you can specify an alternative location at install time (i.e., with a
command line like 'make CONFIG_PREFIX=/tmp/foo install'). If you enabled
any applet installation scheme (either as symlinks or hardlinks), these will
also be installed in the location pointed to by CONFIG_PREFIX.

=head1 USAGE

BusyBox is a multi-call binary.  A multi-call binary is an executable program
that performs the same job as more than one utility program.  That means there
is just a single BusyBox binary, but that single binary acts like a large
number of utilities.  This allows BusyBox to be smaller since all the built-in
utility programs (we call them applets) can share code for many common
operations.

You can also invoke BusyBox by issuing a command as an argument on the
command line.  For example, entering

	/bin/busybox ls

will also cause BusyBox to behave as 'ls'.

Of course, adding '/bin/busybox' into every command would be painful.  So most
people will invoke BusyBox using links to the BusyBox binary.

For example, entering

	ln -s /bin/busybox ls
	./ls

will cause BusyBox to behave as 'ls' (if the 'ls' command has been compiled
into BusyBox).  Generally speaking, you should never need to make all these
links yourself, as the BusyBox build system will do this for you when you run
the 'make install' command.

If you invoke BusyBox with no arguments, it will provide you with a list of the
applets that have been compiled into your BusyBox binary.

=head1 COMMON OPTIONS

Most BusyBox applets support the B<--help> argument to provide a terse runtime
description of their behavior.  If the CONFIG_FEATURE_VERBOSE_USAGE option has
been enabled, more detailed usage information will also be available.

=head1 COMMANDS

Currently available applets include:

	[, [[, add-shell, addgroup, adduser, ascii, ash, base32, base64,
	basename, bc, beep, cat, chgrp, chmod, chown, chpasswd, chpst,
	chroot, cksum, comm, cp, crc32, cryptpw, cttyhack, cut, date, dc,
	dd, delgroup, deluser, df, dirname, dmesg, dos2unix, du, echo, env,
	envdir, envuidgid, expand, expr, factor, false, find, fold, free,
	fsync, fuser, getty, grep, groups, gzip, head, hexdump, hexedit,
	hostid, hush, id, install, iostat, ip, ipaddr, iplink, iproute,
	iptunnel, kill, killall, killall5, less, link, linux32, linux64, ln,
	login, logname, lpd, lpq, lpr, ls, lsof, md5sum, mkdir, mkfifo,
	mknod, mkpasswd, mktemp, mpstat, mv, nc, nice, nl, nmeter, nohup,
	passwd, paste, pgrep, pidof, ping, pipe_progress, pkill, pmap,
	powertop, printenv, printf, ps, pscan, pstree, pwd, pwdx, readlink,
	realpath, remove-shell, rm, rmdir, run-parts, runsv, runsvdir,
	script, seq, setpriv, setsid, setuidgid, sh, sha1sum, sha256sum,
	sha3sum, sha512sum, shred, shuf, sleep, smemcap, softlimit, sort,
	split, su, sulogin, sum, sv, svc, svlogd, svok, switch_root, sync,
	sysctl, tac, tail, tar, tee, test, time, top, tree, true, truncate,
	tsort, tty, uname, unexpand, unix2dos, uptime, vi, vlock, watch,
	wget, which, xxd

=head1 COMMAND DESCRIPTIONS

=over 4

=item B<add-shell>

add-shell SHELL...

Add SHELLs to /etc/shells

=item B<addgroup>

addgroup [-g GID] [-S] [USER] GROUP

Add a group or add a user to a group

	-g GID	Group id
	-S	Create a system group

=item B<adduser>

adduser [OPTIONS] USER [GROUP]

Create new user, or add USER to GROUP

	-h DIR		Home directory
	-g GECOS	GECOS field
	-s SHELL	Login shell
	-G GRP		Group
	-S		Create a system user
	-D		Don't assign a password
	-H		Don't create home directory
	-u UID		User id
	-k SKEL		Skeleton directory (/etc/skel)

=item B<ash>

ash [-il] [-|+Cabefmnuvx] [-|+o OPT]... [-c 'SCRIPT' [ARG0 ARGS] | FILE ARGS | -s ARGS]

Unix shell interpreter

=item B<base32>

base32 [-d] [-w COL] [FILE]

Base32 encode or decode FILE to standard output

	-d	Decode data
	-w COL	Wrap lines at COL (default 76, 0 disables)

=item B<base64>

base64 [-d] [-w COL] [FILE]

Base64 encode or decode FILE to standard output

	-d	Decode data
	-w COL	Wrap lines at COL (default 76, 0 disables)

=item B<basename>

basename FILE [SUFFIX] | -a FILE... | -s SUFFIX FILE...

Strip directory path and SUFFIX from FILE

	-a		All arguments are FILEs
	-s SUFFIX	Remove SUFFIX (implies -a)

=item B<bc>

bc [-sqlw] [FILE]...

Arbitrary precision calculator

	-q	Quiet
	-l	Load standard library
	-s	Be POSIX compatible
	-w	Warn if extensions are used

$BC_LINE_LENGTH changes output width

=item B<beep>

beep -f FREQ -l LEN -d DELAY -r COUNT -n

	-f	Frequency in Hz
	-l	Length in ms
	-d	Delay in ms
	-r	Repetitions
	-n	Start new tone

=item B<cat>

cat [-nbvteA] [FILE]...

Print FILEs to stdout

	-n	Number output lines
	-b	Number nonempty lines
	-v	Show nonprinting characters as ^x or M-x
	-t	...and tabs as ^I
	-e	...and end lines with $
	-A	Same as -vte

=item B<chgrp>

chgrp [-RhLHPcvf]... GROUP FILE...

Change the group membership of FILEs to GROUP

	-h	Affect symlinks instead of symlink targets
	-L	Traverse all symlinks to directories
	-H	Traverse symlinks on command line only
	-P	Don't traverse symlinks (default)
	-R	Recurse
	-c	List changed files
	-v	Verbose
	-f	Hide errors

=item B<chmod>

chmod [-Rcvf] MODE[,MODE]... FILE...

MODE is octal number (bit pattern sstrwxrwxrwx) or [ugoa]{+|-|=}[rwxXst]

	-R	Recurse
	-c	List changed files
	-v	Verbose
	-f	Hide errors

=item B<chown>

chown [-RhLHPcvf]... USER[:[GRP]] FILE...

Change the owner and/or group of FILEs to USER and/or GRP

	-h	Affect symlinks instead of symlink targets
	-L	Traverse all symlinks to directories
	-H	Traverse symlinks on command line only
	-P	Don't traverse symlinks (default)
	-R	Recurse
	-c	List changed files
	-v	Verbose
	-f	Hide errors

=item B<chpasswd>

chpasswd [-me] [-c ALG] [-R DIR]

Read user:password from stdin and update /etc/passwd

	-e	Supplied passwords are in encrypted form
	-m	Encrypt using md5, not des
	-c ALG	des,md5,sha256/512 (default des)
	-R DIR	Directory to chroot into

=item B<chpst>

chpst [-vP012] [-u USER[:GRP]] [-U USER[:GRP]] [-e DIR]
	[-/ DIR] [-n NICE] [-m BYTES] [-d BYTES] [-o N]
	[-p N] [-f BYTES] [-c BYTES] PROG ARGS

Change the process state, run PROG

	-u USER[:GRP]	Set uid and gid
	-U USER[:GRP]	Set $UID and $GID in environment
	-e DIR		Set environment variables as specified by files
			in DIR: file=1st_line_of_file
	-/ DIR		Chroot to DIR
	-n NICE		Add NICE to nice value
	-m BYTES	Same as -d BYTES -s BYTES -l BYTES
	-d BYTES	Limit data segment
	-o N		Limit number of open files per process
	-p N		Limit number of processes per uid
	-f BYTES	Limit output file sizes
	-c BYTES	Limit core file size
	-v		Verbose
	-P		Create new process group
	-0		Close stdin
	-1		Close stdout
	-2		Close stderr

=item B<chroot>

chroot NEWROOT [PROG ARGS]

Run PROG with root directory set to NEWROOT

=item B<cksum>

cksum FILE...

Calculate CRC32 checksum of FILEs

=item B<comm>

comm [-123] FILE1 FILE2

Compare FILE1 with FILE2

	-1	Suppress lines unique to FILE1
	-2	Suppress lines unique to FILE2
	-3	Suppress lines common to both files

=item B<cp>

cp [-arPLHpfinlsTu] SOURCE DEST
or: cp [-arPLHpfinlsu] SOURCE... { -t DIRECTORY | DIRECTORY }

Copy SOURCEs to DEST

	-a	Same as -dpR
	-R,-r	Recurse
	-d,-P	Preserve symlinks (default if -R)
	-L	Follow all symlinks
	-H	Follow symlinks on command line
	-p	Preserve file attributes if possible
	-f	Overwrite
	-i	Prompt before overwrite
	-n	Don't overwrite
	-l,-s	Create (sym)links
	-T	Refuse to copy if DEST is a directory
	-t DIR	Copy all SOURCEs into DIR
	-u	Copy only newer files

=item B<crc32>

crc32 FILE...

Calculate CRC32 checksum of FILEs

=item B<cryptpw>

cryptpw [-P FD] [-m TYPE] [-S SALT] [PASSWORD] [SALT]

Print crypt(3) hashed PASSWORD

	-P N	Read password from fd N
	-m TYPE	des,md5,sha256/512 (default des)
	-S SALT

=item B<cttyhack>

cttyhack [PROG ARGS]

Give PROG a controlling tty if possible.
Example for /etc/inittab (for busybox init):
	::respawn:/bin/cttyhack /bin/sh
Giving controlling tty to shell running with PID 1:
	$ exec cttyhack sh
Starting interactive shell from boot shell script:

	setsid cttyhack sh

=item B<cut>

cut [OPTIONS] [FILE]...

Print selected fields from FILEs to stdout

	-b LIST	Output only bytes from LIST
	-c LIST	Output only characters from LIST
	-d SEP	Field delimiter for input (default -f TAB, -F run of whitespace)
	-O SEP	Field delimeter for output (default = -d for -f, one space for -F)
	-D	Don't sort/collate sections or match -fF lines without delimeter
	-f LIST	Print only these fields (-d is single char)
	-F LIST	Print only these fields (-d is regex)
	-s	Output only lines containing delimiter
	-n	Ignored

=item B<date>

date [OPTIONS] [+FMT] [[-s] TIME]

Display time (using +FMT), or set time

	-u		Work in UTC (don't convert to local time)
	[-s] TIME	Set time to TIME
	-d TIME		Display TIME, not 'now'
	-D FMT		FMT (strptime format) for -s/-d TIME conversion
	-r FILE		Display last modification time of FILE
	-R		Output RFC-2822 date
	-I[SPEC]	Output ISO-8601 date
			SPEC=date (default), hours, minutes, seconds or ns

Recognized TIME formats:

	@seconds_since_1970
	hh:mm[:ss]
	[YYYY.]MM.DD-hh:mm[:ss]
	YYYY-MM-DD hh:mm[:ss]
	[[[[[YY]YY]MM]DD]hh]mm[.ss]
	'date TIME' form accepts MMDDhhmm[[YY]YY][.ss] instead

=item B<dc>

dc [-x] [-eSCRIPT]... [-fFILE]... [FILE]...

Tiny RPN calculator. Operations:
Arithmetic: + - * / % ^
~ - divide with remainder
| - modular exponentiation
v - square root
p - print top of the stack without popping
f - print entire stack
k - pop the value and set precision
i - pop the value and set input radix
o - pop the value and set output radix
Examples: dc -e'2 2 + p' -> 4, dc -e'8 8 * 2 2 + / p' -> 16

=item B<dd>

dd [if=FILE] [of=FILE] [ibs=N obs=N/bs=N] [count=N] [skip=N] [seek=N]
	[conv=notrunc|noerror|sync|fsync]
	[iflag=skip_bytes|count_bytes|fullblock|direct] [oflag=seek_bytes|append|direct]

Copy a file with converting and formatting

	if=FILE		Read from FILE instead of stdin
	of=FILE		Write to FILE instead of stdout
	bs=N		Read and write N bytes at a time
	ibs=N		Read N bytes at a time
	obs=N		Write N bytes at a time
	count=N		Copy only N input blocks
	skip=N		Skip N input blocks
	seek=N		Skip N output blocks
	conv=notrunc	Don't truncate output file
	conv=noerror	Continue after read errors
	conv=sync	Pad blocks with zeros
	conv=fsync	Physically write data out before finishing
	conv=swab	Swap every pair of bytes
	iflag=skip_bytes	skip=N is in bytes
	iflag=count_bytes	count=N is in bytes
	oflag=seek_bytes	seek=N is in bytes
	iflag=direct	O_DIRECT input
	oflag=direct	O_DIRECT output
	iflag=fullblock	Read full blocks
	oflag=append	Open output in append mode
	status=noxfer	Suppress rate output
	status=none	Suppress all output

N may be suffixed by c (1), w (2), b (512), kB (1000), k (1024), MB, M, GB, G

=item B<delgroup>

delgroup [USER] GROUP

Delete group GROUP from the system or user USER from group GROUP

=item B<deluser>

deluser [--remove-home] USER

Delete USER from the system

=item B<df>

df [-PkmhTai] [-B SIZE] [-t TYPE] [FILESYSTEM]...

Print filesystem usage statistics

	-P	POSIX output format
	-k	1024-byte blocks (default)
	-m	1M-byte blocks
	-h	Human readable (e.g. 1K 243M 2G)
	-T	Print filesystem type
	-t TYPE	Print only mounts of this type
	-a	Show all filesystems
	-i	Inodes
	-B SIZE	Blocksize

=item B<dirname>

dirname FILENAME

Strip non-directory suffix from FILENAME

=item B<dmesg>

dmesg [-cr] [-n LEVEL] [-s SIZE]

Print or control the kernel ring buffer

	-c		Clear ring buffer after printing
	-n LEVEL	Set console logging level
	-s SIZE		Buffer size
	-r		Print raw message buffer

=item B<dos2unix>

dos2unix [-ud] [FILE]

Convert FILE in-place from DOS to Unix format.
When no file is given, use stdin/stdout.

	-u	dos2unix
	-d	unix2dos

=item B<du>

du [-aHLdclsxhmk] [FILE]...

Summarize disk space used for FILEs (or directories)

	-a	Show file sizes too
	-b	Apparent size (including holes)
	-L	Follow all symlinks
	-H	Follow symlinks on command line
	-d N	Limit output to directories (and files with -a) of depth < N
	-c	Show grand total
	-l	Count sizes many times if hard linked
	-s	Display only a total for each argument
	-x	Skip directories on different filesystems
	-h	Sizes in human readable format (e.g., 1K 243M 2G)
	-m	Sizes in megabytes
	-k	Sizes in kilobytes (default)

=item B<echo>

echo [-neE] [ARG]...

Print ARGs to stdout

	-n	No trailing newline
	-e	Interpret backslash escapes (\t=tab etc)
	-E	Don't interpret backslash escapes (default)

=item B<env>

env [-i0] [-u NAME]... [-] [NAME=VALUE]... [PROG ARGS]

Print current environment or run PROG after setting up environment

	-, -i	Start with empty environment
	-0	NUL terminated output
	-u NAME	Remove variable from environment

=item B<envdir>

envdir DIR PROG ARGS

Set various environment variables as specified by files
in the directory DIR, run PROG

=item B<envuidgid>

envuidgid USER PROG ARGS

Set $UID to USER's uid and $GID to USER's gid, run PROG

=item B<expand>

expand [-i] [-t N] [FILE]...

Convert tabs to spaces, writing to stdout

	-i	Don't convert tabs after non blanks
	-t	Tabstops every N chars

=item B<expr>

expr EXPRESSION

Print the value of EXPRESSION

EXPRESSION may be:

	ARG1 | ARG2	ARG1 if it is neither null nor 0, otherwise ARG2
	ARG1 & ARG2	ARG1 if neither argument is null or 0, otherwise 0
	ARG1 < ARG2	1 if ARG1 is less than ARG2, else 0. Similarly:
	ARG1 <= ARG2
	ARG1 = ARG2
	ARG1 != ARG2
	ARG1 >= ARG2
	ARG1 > ARG2
	ARG1 + ARG2	Sum of ARG1 and ARG2. Similarly:
	ARG1 - ARG2
	ARG1 * ARG2
	ARG1 / ARG2
	ARG1 % ARG2
	STRING : REGEXP		Anchored pattern match of REGEXP in STRING
	match STRING REGEXP	Same as STRING : REGEXP
	substr STRING POS LEN	Substring of STRING, POS counts from 1
	index STRING CHARS	Index in STRING where any CHARS is found, or 0
	length STRING		Length of STRING
	quote TOKEN		Interpret TOKEN as a string, even if
				it is a keyword like 'match' or an
				operator like '/'
	(EXPRESSION)		Value of EXPRESSION

Beware that many operators need to be escaped or quoted for shells.
Comparisons are arithmetic if both ARGs are numbers, else
lexicographical. Pattern matches return the string matched between
\( and \) or null; if \( and \) are not used, they return the number
of characters matched or 0.

=item B<factor>

factor [NUMBER]...

Print prime factors

=item B<find>

find [-HL] [PATH]... [OPTIONS] [ACTIONS]

Search for files and perform actions on them.
First failed action stops processing of current file.
Defaults: PATH is current directory, action is '-print'

	-L,-follow	Follow symlinks
	-H		...on command line only
	-xdev		Don't descend directories on other filesystems
	-maxdepth N	Descend at most N levels. -maxdepth 0 applies
			actions to command line arguments only
	-mindepth N	Don't act on first N levels
	-depth		Act on directory *after* traversing it

Actions:

	( ACTIONS )	Group actions for -o / -a
	! ACT		Invert ACT's success/failure
	ACT1 [-a] ACT2	If ACT1 fails, stop, else do ACT2
	ACT1 -o ACT2	If ACT1 succeeds, stop, else do ACT2
			Note: -a has higher priority than -o
	-name PATTERN	Match file name (w/o directory name) to PATTERN
	-iname PATTERN	Case insensitive -name
	-path PATTERN	Match path to PATTERN
	-ipath PATTERN	Case insensitive -path
	-regex PATTERN	Match path to regex PATTERN
	-type X		File type is X (one of: f,d,l,b,c,s,p)
	-executable	File is executable
	-perm MASK	At least one mask bit (+MASK), all bits (-MASK),
			or exactly MASK bits are set in file's mode
	-mtime DAYS	mtime is greater than (+N), less than (-N),
			or exactly N days in the past
	-atime DAYS	atime +N/-N/N days in the past
	-ctime DAYS	ctime +N/-N/N days in the past
	-mmin MINS	mtime is greater than (+N), less than (-N),
			or exactly N minutes in the past
	-amin MINS	atime +N/-N/N minutes in the past
	-cmin MINS	ctime +N/-N/N minutes in the past
	-newer FILE	mtime is more recent than FILE's
	-inum N		File has inode number N
	-samefile FILE	File is same as FILE
	-user NAME/ID	File is owned by given user
	-group NAME/ID	File is owned by given group
	-size N[bck]	File size is N (c:bytes,k:kbytes,b:512 bytes(def.))
			+/-N: file size is bigger/smaller than N
	-links N	Number of links is greater than (+N), less than (-N),
			or exactly N
	-empty		Match empty file/directory
	-prune		If current file is directory, don't descend into it
If none of the following actions is specified, -print is assumed
	-print		Print file name
	-print0		Print file name, NUL terminated
	-exec CMD ARG ;	Run CMD with all instances of {} replaced by
			file name. Fails if CMD exits with nonzero
	-exec CMD ARG + Run CMD with {} replaced by list of file names
	-delete		Delete current file/directory. Turns on -depth option
	-quit		Exit

=item B<fold>

fold [-bs] [-w WIDTH] [FILE]...

Wrap input lines in FILEs (or stdin), writing to stdout

	-b	Count bytes rather than columns
	-s	Break at spaces
	-w	Use WIDTH columns instead of 80

=item B<free>

free [-bkmgh]

Display free and used memory

=item B<fsync>

fsync [-d] FILE...

Write all buffered blocks in FILEs to disk

	-d	Avoid syncing metadata

=item B<fuser>

fuser [-msk46] [-SIGNAL] FILE or PORT/PROTO

Find processes which use FILEs or PORTs

	-m	Find processes which use same fs as FILEs
	-4,-6	Search only IPv4/IPv6 space
	-s	Don't display PIDs
	-k	Kill found processes
	-SIGNAL	Signal to send (default: KILL)

=item B<getty>

getty [OPTIONS] BAUD_RATE[,BAUD_RATE]... TTY [TERMTYPE]

Open TTY, prompt for login name, then invoke /bin/login

	-h		Enable hardware RTS/CTS flow control
	-L		Set CLOCAL (ignore Carrier Detect state)
	-m		Get baud rate from modem's CONNECT status message
	-n		Don't prompt for login name
	-w		Wait for CR or LF before sending /etc/issue
	-i		Don't display /etc/issue
	-f ISSUE_FILE	Display ISSUE_FILE instead of /etc/issue
	-l LOGIN	Invoke LOGIN instead of /bin/login
	-t SEC		Terminate after SEC if no login name is read
	-I INITSTR	Send INITSTR before anything else
	-H HOST		Log HOST into the utmp file as the hostname

BAUD_RATE of 0 leaves it unchanged

=item B<grep>

grep [-HhnlLoqvsrRiwFE] [-m N] { PATTERN | -e PATTERN... | -f FILE... } [FILE]...

Search for PATTERN in FILEs (or stdin)

	-H	Add 'filename:' prefix
	-h	Do not add 'filename:' prefix
	-n	Add 'line_no:' prefix
	-l	Show only names of files that match
	-L	Show only names of files that don't match
	-c	Show only count of matching lines
	-o	Show only the matching part of line
	-q	Quiet. Return 0 if PATTERN is found, 1 otherwise
	-v	Select non-matching lines
	-s	Suppress open and read errors
	-r	Recurse
	-R	Recurse and dereference symlinks
	-i	Ignore case
	-w	Match whole words only
	-x	Match whole lines only
	-F	PATTERN is a literal (not regexp)
	-E	PATTERN is an extended regexp
	-m N	Match up to N times per file
	-e PTRN	Pattern to match
	-f FILE	Read pattern from file

=item B<groups>

groups [USER]

Print the groups USER is in

=item B<gzip>

gzip [-cfkdt] [FILE]...

Compress FILEs (or stdin)

	-d	Decompress
	-c	Write to stdout
	-f	Force
	-k	Keep input files
	-t	Test integrity

=item B<head>

head [OPTIONS] [FILE]...

Print first 10 lines of FILEs (or stdin).
With more than one FILE, precede each with a filename header.

	-n N[bkm]	Print first N lines
	-n -N[bkm]	Print all except N last lines
	-c [-]N[bkm]	Print first N bytes
			(b:*512 k:*1024 m:*1024^2)
	-q		Never print headers
	-v		Always print headers

=item B<hexdump>

hexdump [-bcdoxCv] [-e FMT] [-f FMT_FILE] [-n LEN] [-s OFS] [FILE]...

Display FILEs (or stdin) in a user specified format

	-b		1-byte octal display
	-c		1-byte character display
	-d		2-byte decimal display
	-o		2-byte octal display
	-x		2-byte hex display
	-C		hex+ASCII 16 bytes per line
	-v		Show all (no dup folding)
	-e FORMAT_STR	Example: '16/1 "%02x|""\n"'
	-f FORMAT_FILE
	-n LENGTH	Show only first LENGTH bytes
	-s OFFSET	Skip OFFSET bytes

=item B<hexedit>

hexedit FILE

Edit FILE in hexadecimal

=item B<hostid>

hostid 

Print out a unique 32-bit identifier for the machine

=item B<hush>

hush [-enxl] [-c 'SCRIPT' [ARG0 ARGS] | FILE ARGS | -s ARGS]

Unix shell interpreter

=item B<id>

id [-ugGnr] [USER]

Print information about USER or the current user

	-u	User ID
	-g	Group ID
	-G	Supplementary group IDs
	-n	Print names instead of numbers
	-r	Print real ID instead of effective ID

=item B<install>

install [-cdDsp] [-o USER] [-g GRP] [-m MODE] [-t DIR] [SOURCE]... DEST

Copy files and set attributes

	-c	Just copy (default)
	-d	Create directories
	-D	Create leading target directories
	-s	Strip symbol table
	-p	Preserve date
	-o USER	Set ownership
	-g GRP	Set group ownership
	-m MODE	Set permissions
	-t DIR	Install to DIR

=item B<iostat>

iostat [-c] [-d] [-t] [-z] [-k|-m] [ALL|BLOCKDEV...] [INTERVAL [COUNT]]

Report CPU and I/O statistics

	-c	Show CPU utilization
	-d	Show device utilization
	-t	Print current time
	-z	Omit devices with no activity
	-k	Use kb/s
	-m	Use Mb/s

=item B<ip>

ip [OPTIONS] address|route|link|tunnel [ARGS]

OPTIONS := -f[amily] inet|inet6|link | -o[neline]

ip addr add|del IFADDR dev IFACE | show|flush [dev IFACE] [to PREFIX]
ip route list|flush|add|del|change|append|replace|test ROUTE
ip link set IFACE [up|down] [arp on|off] [multicast on|off]
	[promisc on|off] [mtu NUM] [name NAME] [qlen NUM] [address MAC]
	[master IFACE | nomaster] [netns PID]
ip tunnel add|change|del|show [NAME]
	[mode ipip|gre|sit] [remote ADDR] [local ADDR] [ttl TTL]

=item B<ipaddr>

ipaddr add|del IFADDR dev IFACE | show|flush [dev IFACE] [to PREFIX]

ipaddr add|change|replace|delete dev IFACE [CONFFLAG-LIST] IFADDR
	IFADDR := PREFIX | ADDR peer PREFIX [broadcast ADDR|+|-]
		[anycast ADDR] [label STRING] [scope SCOPE]
	PREFIX := ADDR[/MASK]
	SCOPE := [host|link|global|NUMBER]
	CONFFLAG-LIST := [CONFFLAG-LIST] CONFFLAG
	CONFFLAG := [noprefixroute]
ipaddr show|flush [dev IFACE] [scope SCOPE] [to PREFIX] [label PATTERN]

=item B<iplink>

iplink set IFACE [up|down] [arp on|off] [multicast on|off]
	[promisc on|off] [mtu NUM] [name NAME] [qlen NUM] [address MAC]
	[master IFACE | nomaster] [netns PID]
iplink add [link IFACE] IFACE [address MAC] type TYPE [ARGS]
iplink delete IFACE type TYPE [ARGS]
	TYPE ARGS := vlan VLANARGS | vrf table NUM
	VLANARGS := id VLANID [protocol 802.1q|802.1ad] [reorder_hdr on|off]
		[gvrp on|off] [mvrp on|off] [loose_binding on|off]
iplink show [IFACE]

=item B<iproute>

iproute list|flush|add|del|change|append|replace|test ROUTE

iproute list|flush SELECTOR
	SELECTOR := [root PREFIX] [match PREFIX] [proto RTPROTO]
	PREFIX := default|ADDR[/MASK]
iproute get ADDR [from ADDR iif IFACE]
	[oif IFACE] [tos TOS]
iproute add|del|change|append|replace|test ROUTE
	ROUTE := NODE_SPEC [INFO_SPEC]
	NODE_SPEC := PREFIX [proto RTPROTO] [scope SCOPE] [metric METRIC]
	INFO_SPEC := NH OPTIONS
	NH := [via [inet|inet6] ADDR] [dev IFACE] [src ADDR] [onlink]
	OPTIONS := [mtu [lock] NUM] [advmss [lock] NUM]

=item B<iptunnel>

iptunnel add|change|del|show [NAME]
	[mode ipip|gre|sit] [remote ADDR] [local ADDR] [ttl TTL]

iptunnel add|change|del|show [NAME]
	[mode ipip|gre|sit] [remote ADDR] [local ADDR]
	[[i|o]seq] [[i|o]key KEY] [[i|o]csum]
	[ttl TTL] [tos TOS] [[no]pmtudisc] [dev PHYS_DEV]

=item B<kill>

kill [-l] [-SIG] PID...

Send a signal (default: TERM) to given PIDs

	-l	List all signal names and numbers

=item B<killall>

killall [-lq] [-SIG] PROCESS_NAME...

Send a signal (default: TERM) to given processes

	-l	List all signal names and numbers
	-q	Don't complain if no processes were killed

=item B<killall5>

killall5 [-l] [-SIG] [-o PID]...

Send a signal (default: TERM) to all processes outside current session

	-l	List all signal names and numbers
	-o PID	Don't signal this PID

=item B<less>

less [-EFIMmNSRh~] [FILE]...

View FILE (or stdin) one screenful at a time

	-E	Quit once the end of a file is reached
	-F	Quit if entire file fits on first screen
	-I	Ignore case in all searches
	-M,-m	Display status line with line numbers
		and percentage through the file
	-N	Prefix line number to each line
	-S	Truncate long lines
	-R	Remove color escape codes in input
	-~	Suppress ~s displayed past EOF

=item B<link>

link FILE LINK

Create hard LINK to FILE

=item B<ln>

ln [-sfnbtv] [-S SUF] TARGET... LINK|DIR

Create a link LINK or DIR/TARGET to the specified TARGET(s)

	-s	Make symlinks instead of hardlinks
	-f	Remove existing destinations
	-n	Don't dereference symlinks - treat like normal file
	-b	Make a backup of the target (if exists) before link operation
	-S SUF	Use suffix instead of ~ when making backup files
	-T	Treat LINK as a file, not DIR
	-v	Verbose

=item B<login>

login [-p] [-h HOST] [[-f] USER]

Begin a new session on the system

	-f	Don't authenticate (user already authenticated)
	-h HOST	Host user came from (for network logins)
	-p	Preserve environment

$LOGIN_TIMEOUT		Seconds (default 60, 0 - disable)
$LOGIN_PRE_SUID_SCRIPT	Execute before user ID change

=item B<logname>

logname 

Print the name of the current user

=item B<lpd>

lpd SPOOLDIR [HELPER [ARGS]]

SPOOLDIR must contain (symlinks to) device nodes or directories
with names matching print queue names. In the first case, jobs are
sent directly to the device. Otherwise each job is stored in queue
directory and HELPER program is called. Name of file to print
is passed in $DATAFILE variable.
Example:

	tcpsvd -E 0 515 softlimit -m 999999 lpd /var/spool ./print

=item B<lpq>

lpq [-P queue[@host[:port]]] [-U USERNAME] [-d JOBID]... [-fs]

	-P	lp service to connect to (else uses $PRINTER)
	-d	Delete jobs
	-f	Force any waiting job to be printed
	-s	Short display

=item B<lpr>

lpr -P queue[@host[:port]] -U USERNAME -J TITLE -Vmh [FILE]...

	-P	lp service to connect to (else uses $PRINTER)
	-m	Send mail on completion
	-h	Print banner page too
	-V	Verbose

=item B<ls>

ls [-1AaCxdLHRFplinshrSXvctu] [-w WIDTH] [FILE]...

List directory contents

	-1	One column output
	-a	Include names starting with .
	-A	Like -a, but exclude . and ..
	-x	List by lines
	-d	List directory names, not contents
	-L	Follow symlinks
	-H	Follow symlinks on command line
	-R	Recurse
	-p	Append / to directory names
	-F	Append indicator (one of */=@|) to names
	-l	Long format
	-i	List inode numbers
	-n	List numeric UIDs and GIDs instead of names
	-s	List allocated blocks
	-lc	List ctime
	-lu	List atime
	--full-time	List full date/time
	-h	Human readable sizes (1K 243M 2G)
	--group-directories-first
	-S	Sort by size
	-X	Sort by extension
	-v	Sort by version
	-t	Sort by mtime
	-tc	Sort by ctime
	-tu	Sort by atime
	-r	Reverse sort order
	-w N	Format N columns wide
	--color[={always,never,auto}]

=item B<lsof>

lsof 

Show all open files

=item B<md5sum>

md5sum [-c[sw]] [FILE]...

Print or check MD5 checksums

	-c	Check sums against list in FILEs
	-s	Don't output anything, status code shows success
	-w	Warn about improperly formatted checksum lines

=item B<mkdir>

mkdir [-m MODE] [-p] DIRECTORY...

Create DIRECTORY

	-m MODE	Mode
	-p	No error if exists; make parent directories as needed

=item B<mkfifo>

mkfifo [-m MODE] NAME

Create named pipe

	-m MODE	Mode (default a=rw)

=item B<mknod>

mknod [-m MODE] NAME TYPE [MAJOR MINOR]

Create a special file (block, character, or pipe)

	-m MODE	Creation mode (default a=rw)
TYPE:
	b	Block device
	c or u	Character device
	p	Named pipe (MAJOR MINOR must be omitted)

=item B<mkpasswd>

mkpasswd [-P FD] [-m TYPE] [-S SALT] [PASSWORD] [SALT]

Print crypt(3) hashed PASSWORD

	-P N	Read password from fd N
	-m TYPE	des,md5,sha256/512 (default des)
	-S SALT

=item B<mktemp>

mktemp [-dt] [-p DIR] [TEMPLATE]

Create a temporary file with name based on TEMPLATE and print its name.
TEMPLATE must end with XXXXXX (e.g. [/dir/]nameXXXXXX).
Without TEMPLATE, -t tmp.XXXXXX is assumed.

	-d	Make directory, not file
	-q	Fail silently on errors
	-t	Prepend base directory name to TEMPLATE
	-p DIR	Use DIR as a base directory (implies -t)
	-u	Do not create anything; print a name

Base directory is: -p DIR, else $TMPDIR, else /tmp

=item B<mpstat>

mpstat [-A] [-I SUM|CPU|ALL|SCPU] [-u] [-P num|ALL] [INTERVAL [COUNT]]

Per-processor statistics

	-A			Same as -I ALL -u -P ALL
	-I SUM|CPU|ALL|SCPU	Report interrupt statistics
	-P num|ALL		Processor to monitor
	-u			Report CPU utilization

=item B<mv>

mv [-finT] SOURCE DEST
or: mv [-fin] SOURCE... { -t DIRECTORY | DIRECTORY }

Rename SOURCE to DEST, or move SOURCEs to DIRECTORY

	-f	Don't prompt before overwriting
	-i	Interactive, prompt before overwrite
	-n	Don't overwrite an existing file
	-T	Refuse to move if DEST is a directory
	-t DIR	Move all SOURCEs into DIR

=item B<nc>

nc [OPTIONS] HOST PORT  - connect
nc [OPTIONS] -l -p PORT [HOST] [PORT]  - listen

	-e PROG	Run PROG after connect (must be last)
	-l	Listen mode, for inbound connects
	-lk	With -e, provides persistent server
	-p PORT	Local port
	-s ADDR	Local address
	-w SEC	Timeout for connects and final net reads
	-i SEC	Delay interval for lines sent
	-n	Don't do DNS resolution
	-u	UDP mode
	-b	Allow broadcasts
	-v	Verbose
	-o FILE	Hex dump traffic
	-z	Zero-I/O mode (scanning)

=item B<nice>

nice [-n ADJUST] [PROG ARGS]

Change scheduling priority, run PROG

	-n ADJUST	Adjust priority by ADJUST

=item B<nl>

nl [OPTIONS] [FILE]...

Write FILEs to standard output with line numbers added

	-b STYLE	Which lines to number - a: all, t: nonempty, n: none
	-i N		Line number increment
	-s STRING	Use STRING as line number separator
	-v N		Start from N
	-w N		Width of line numbers

=item B<nmeter>

nmeter [-d MSEC] FORMAT_STRING

Monitor system in real time

 -d MSEC	Milliseconds between updates, default:1000, none:-1

Format specifiers:

 %Nc or %[cN]	CPU. N - bar size (default 10)
		(displays: S:system U:user N:niced D:iowait I:irq i:softirq)
 %[nINTERFACE]	Network INTERFACE
 %m		Allocated memory
 %[md]		Dirty file-backed memory
 %[mw]		Memory being written to storage
 %[mf]		Free memory
 %[mt]		Total memory
 %s		Allocated swap
 %f		Number of used file descriptors
 %Ni		Total/specific IRQ rate
 %x		Context switch rate
 %p		Forks
 %[pn]		# of processes
 %b		Block io
 %Nt		Time (with N decimal points)
 %NT		Zero-based timestamp (with N decimal points)
 %r		Print <cr> instead of <lf> at EOL

=item B<nohup>

nohup PROG ARGS

Run PROG immune to hangups, with output to a non-tty

=item B<passwd>

passwd [-a ALG] [-dlu] [USER]

Change USER's password (default: current user)

	-a ALG	des,md5,sha256/512 (default des)
	-d	Set password to ''
	-l	Lock (disable) account
	-u	Unlock (enable) account

=item B<paste>

paste [-d LIST] [-s] [FILE]...

Paste lines from each input file, separated with tab

	-d LIST	Use delimiters from LIST, not tab
	-s      Serial: one file at a time

=item B<pgrep>

pgrep [-flanovx] [-s SID|-P PPID|PATTERN]

Display process(es) selected by regex PATTERN

	-l	Show command name too
	-a	Show command line too
	-f	Match against entire command line
	-n	Show the newest process only
	-o	Show the oldest process only
	-v	Negate the match
	-x	Match whole name (not substring)
	-s	Match session ID (0 for current)
	-P	Match parent process ID

=item B<pidof>

pidof [-s] [-o PID] [NAME]...

List PIDs of all processes with names that match NAMEs

	-s	Show only one PID
	-o PID	Omit given pid
		Use %PPID to omit pid of pidof's parent

=item B<ping>

ping HOST

Send ICMP ECHO_REQUESTs to HOST

=item B<pkill>

pkill [-l|-SIGNAL] [-xfvnoe] [-s SID|-P PPID|PATTERN]

Send signal to processes selected by regex PATTERN

	-l	List all signals
	-x	Match whole name (not substring)
	-f	Match against entire command line
	-s SID	Match session ID (0 for current)
	-P PPID	Match parent process ID
	-v	Negate the match
	-n	Signal the newest process only
	-o	Signal the oldest process only
	-e	Display name and PID of the process being killed

=item B<pmap>

pmap [-xq] PID...

Display process memory usage

	-x	Show details
	-q	Quiet

=item B<powertop>

powertop 

Analyze power consumption on Intel-based laptops

=item B<printenv>

printenv [VARIABLE]...

Print environment VARIABLEs.
If no VARIABLE specified, print all.

=item B<printf>

printf FORMAT [ARG]...

Format and print ARG(s) according to FORMAT (a-la C printf)

=item B<ps>

ps [-o COL1,COL2=HEADER] [-T]

Show list of processes

	-o COL1,COL2=HEADER	Select columns for display
	-T			Show threads

=item B<pscan>

pscan [-cb] [-p MIN_PORT] [-P MAX_PORT] [-t TIMEOUT] [-T MIN_RTT] HOST

Scan HOST, print all open ports

	-c	Show closed ports too
	-b	Show blocked ports too
	-p PORT	Scan from this port (default 1)
	-P PORT	Scan up to this port (default 1024)
	-t MS	Timeout (default 5000 ms)
	-T MS	Minimum rtt (default 5 ms)

=item B<pstree>

pstree [-p] [PID|USER]

Display process tree, optionally start from USER or PID

	-p	Show pids

=item B<pwd>

pwd 

Print the full filename of the current working directory

=item B<pwdx>

pwdx PID...

Show current directory for PIDs

=item B<readlink>

readlink [-fnv] FILE

Display the value of a symlink

	-f	Canonicalize by following all symlinks
	-n	Don't add newline
	-v	Verbose

=item B<realpath>

realpath FILE...

Print absolute pathnames of FILEs

=item B<remove-shell>

remove-shell SHELL...

Remove SHELLs from /etc/shells

=item B<rm>

rm [-irf] FILE...

Remove (unlink) FILEs

	-i	Always prompt before removing
	-f	Never prompt
	-R,-r	Recurse

=item B<rmdir>

rmdir [-p] DIRECTORY...

Remove DIRECTORY if it is empty

	-p	Include parents
	--ignore-fail-on-non-empty

=item B<run-parts>

run-parts [-a ARG]... [-u UMASK] [--reverse] [--test] [--exit-on-error] [--list] DIRECTORY

Run a bunch of scripts in DIRECTORY

	-a ARG		Pass ARG as argument to scripts
	-u UMASK	Set UMASK before running scripts
	--reverse	Reverse execution order
	--test		Dry run
	--exit-on-error	Exit if a script exits with non-zero
	--list		Print names of matching files even if they are not executable

=item B<runsv>

runsv DIR

Start and monitor a service and optionally an appendant log service

=item B<runsvdir>

runsvdir [-P] [-s SCRIPT] DIR

Start a runsv process for each subdirectory. If it exits, restart it.

	-P		Put each runsv in a new session
	-s SCRIPT	Run SCRIPT <signo> after signal is processed

=item B<script>

script [-afq] [-t[FILE]] [-c PROG] [OUTFILE]

Default OUTFILE is 'typescript'

	-a	Append output
	-c PROG	Run PROG, not shell
	-q	Quiet
	-t[FILE] Send timing to stderr or FILE

=item B<seq>

seq [-w] [-s SEP] [FIRST [INC]] LAST

Print numbers from FIRST to LAST, in steps of INC.
FIRST, INC default to 1.

	-w	Pad to last with leading zeros
	-s SEP	String separator

=item B<setpriv>

setpriv [OPTIONS] PROG ARGS

Run PROG with different privilege settings

-d,--dump		Show current capabilities
--nnp,--no-new-privs	Ignore setuid/setgid bits and file capabilities
--inh-caps CAP,CAP	Set inheritable capabilities
--ambient-caps CAP,CAP	Set ambient capabilities

=item B<setsid>

setsid [-c] PROG ARGS

Run PROG in a new session. PROG will have no controlling terminal
and will not be affected by keyboard signals (^C etc).

	-c	Set controlling terminal to stdin

=item B<setuidgid>

setuidgid USER PROG ARGS

Set uid and gid to USER's uid and gid, drop supplementary group ids,
run PROG

=item B<sh>

sh [-il] [-|+Cabefmnuvx] [-|+o OPT]... [-c 'SCRIPT' [ARG0 ARGS] | FILE ARGS | -s ARGS]

Unix shell interpreter

=item B<sha1sum>

sha1sum [-c[sw]] [FILE]...

Print or check SHA1 checksums

	-c	Check sums against list in FILEs
	-s	Don't output anything, status code shows success
	-w	Warn about improperly formatted checksum lines

=item B<sha256sum>

sha256sum [-c[sw]] [FILE]...

Print or check SHA256 checksums

	-c	Check sums against list in FILEs
	-s	Don't output anything, status code shows success
	-w	Warn about improperly formatted checksum lines

=item B<sha3sum>

sha3sum [-c[sw]] [-a BITS] [FILE]...

Print or check SHA3 checksums

	-c	Check sums against list in FILEs
	-s	Don't output anything, status code shows success
	-w	Warn about improperly formatted checksum lines
	-a BITS	224 (default), 256, 384, 512

=item B<sha512sum>

sha512sum [-c[sw]] [FILE]...

Print or check SHA512 checksums

	-c	Check sums against list in FILEs
	-s	Don't output anything, status code shows success
	-w	Warn about improperly formatted checksum lines

=item B<shred>

shred [-fuz] [-n N] [-s SIZE] FILE...

Overwrite/delete FILEs

	-f	Chmod to ensure writability
	-s SIZE	Size to write
	-n N	Overwrite N times (default 3)
	-z	Final overwrite with zeros
	-u	Remove file

=item B<shuf>

shuf [-n NUM] [-o FILE] [-z] [FILE | -e [ARG...] | -i L-H]

Randomly permute lines

	-n NUM	Output at most NUM lines
	-o FILE	Write to FILE, not standard output
	-z	NUL terminated output
	-e	Treat ARGs as lines
	-i L-H	Treat numbers L-H as lines

=item B<sleep>

sleep [N]...

Pause for a time equal to the total of the args given, where each arg can
have an optional suffix of (s)econds, (m)inutes, (h)ours, or (d)ays

=item B<smemcap>

smemcap >SMEMDATA.TAR

Collect memory usage data in /proc and write it to stdout

=item B<softlimit>

softlimit [-a BYTES] [-m BYTES] [-d BYTES] [-s BYTES] [-l BYTES]
	[-f BYTES] [-c BYTES] [-r BYTES] [-o N] [-p N] [-t N]
	PROG ARGS

Set soft resource limits, then run PROG

	-a BYTES	Limit total size of all segments
	-m BYTES	Same as -d BYTES -s BYTES -l BYTES -a BYTES
	-d BYTES	Limit data segment
	-s BYTES	Limit stack segment
	-l BYTES	Limit locked memory size
	-o N		Limit number of open files per process
	-p N		Limit number of processes per uid
Options controlling file sizes:

	-f BYTES	Limit output file sizes
	-c BYTES	Limit core file size
Efficiency opts:

	-r BYTES	Limit resident set size
	-t N		Limit CPU time, process receives
			a SIGXCPU after N seconds

=item B<sort>

sort [-nrughMcszbdfiokt] [-o FILE] [-k START[.OFS][OPTS][,END[.OFS][OPTS]] [-t CHAR] [FILE]...

Sort lines of text

	-o FILE	Output to FILE
	-c	Check whether input is sorted
	-b	Ignore leading blanks
	-f	Ignore case
	-i	Ignore unprintable characters
	-d	Dictionary order (blank or alphanumeric only)
	-n	Sort numbers
	-g	General numerical sort
	-h	Sort human readable numbers (2K 1G)
	-M	Sort month
	-V	Sort version
	-t CHAR	Field separator
	-k N[,M] Sort by Nth field
	-r	Reverse sort order
	-s	Stable (don't sort ties alphabetically)
	-u	Suppress duplicate lines
	-z	NUL terminated input and output

=item B<split>

split [OPTIONS] [INPUT [PREFIX]]

	-b N[k|m]	Split by N (kilo|mega)bytes
	-l N		Split by N lines
	-a N		Use N letters as suffix

=item B<su>

su [-lmp] [-s SH] [-] [USER [FILE ARGS | -c 'CMD' [ARG0 ARGS]]]

Run shell under USER (by default, root)

	-,-l	Clear environment, go to home dir, run shell as login shell
	-p,-m	Do not set new $HOME, $SHELL, $USER, $LOGNAME
	-c CMD	Command to pass to 'sh -c'
	-s SH	Shell to use instead of user's default

=item B<sulogin>

sulogin [-t N] [TTY]

Single user login

	-p	Start a login shell
	-t SEC	Timeout

=item B<sum>

sum [-rs] [FILE]...

Checksum and count the blocks in a file

	-r	Use BSD sum algorithm (1K blocks)
	-s	Use System V sum algorithm (512byte blocks)

=item B<sv>

sv [-v] [-w SEC] CMD SERVICE_DIR...

Control services monitored by runsv supervisor.
Commands (only first character is enough):

status: query service status
up: if service isn't running, start it. If service stops, restart it
once: like 'up', but if service stops, don't restart it
down: send TERM and CONT signals. If ./run exits, start ./finish
	if it exists. After it stops, don't restart service
exit: send TERM and CONT signals to service and log service. If they exit,
	runsv exits too
pause, cont, hup, alarm, interrupt, quit, 1, 2, term, kill: send
STOP, CONT, HUP, ALRM, INT, QUIT, USR1, USR2, TERM, KILL signal to service

=item B<svc>

svc [-udopchaitkx] SERVICE_DIR...

Control services monitored by runsv supervisor

	-u	If service is not running, start it; restart if it stops
	-d	If service is running, send TERM+CONT signals; do not restart it
	-o	Once: if service is not running, start it; do not restart it
	-pchaitk Send STOP, CONT, HUP, ALRM, INT, TERM, KILL signal to service
	-x	Exit: runsv will exit as soon as the service is down

=item B<svlogd>

svlogd [-tttv] [-r C] [-R CHARS] [-l MATCHLEN] [-b BUFLEN] DIR...

Read log data from stdin and write to rotated log files in DIRs

	-r C	Replace non-printable characters with C
	-R CHARS Also replace CHARS with C (default _)
	-t	Timestamp with @tai64n
	-tt	Timestamp with yyyy-mm-dd_hh:mm:ss.sssss
	-ttt	Timestamp with yyyy-mm-ddThh:mm:ss.sssss
	-v	Verbose

DIR/config file modifies behavior:
sSIZE - when to rotate logs (default 1000000, 0 disables)
nNUM - number of files to retain
!PROG - process rotated log with PROG
+,-PATTERN - (de)select line for logging
E,ePATTERN - (de)select line for stderr

=item B<svok>

svok SERVICE_DIR

Check whether runsv supervisor is running.
Exit code is 0 if it does, 100 if it does not,
111 (with error message) if SERVICE_DIR does not exist.

=item B<switch_root>

switch_root [-c CONSOLE_DEV] NEW_ROOT NEW_INIT [ARGS]

Free initramfs and switch to another root fs:

chroot to NEW_ROOT, delete all in /, move NEW_ROOT to /,
execute NEW_INIT. PID must be 1. NEW_ROOT must be a mountpoint.

	-c DEV	Reopen stdio to DEV after switch

=item B<sync>

sync [-df] [FILE]...

Write all buffered blocks (in FILEs) to disk
	-d	Avoid syncing metadata
	-f	Sync filesystems underlying FILEs

=item B<sysctl>

sysctl [-enq] { -a | -p [FILE]... | [-w] [KEY[=VALUE]]... }

Show/set kernel parameters

	-e	Don't warn about unknown keys
	-n	Don't show key names
	-q      Quiet
	-a	Show all values
	-p	Set values from FILEs (default /etc/sysctl.conf)
	-w	Set values

=item B<tac>

tac [FILE]...

Concatenate FILEs and print them in reverse

=item B<tail>

tail [OPTIONS] [FILE]...

Print last 10 lines of FILEs (or stdin) to.
With more than one FILE, precede each with a filename header.

	-c [+]N[bkm]	Print last N bytes
	-n N[bkm]	Print last N lines
	-n +N[bkm]	Start on Nth line and print the rest
			(b:*512 k:*1024 m:*1024^2)
	-q		Never print headers
	-v		Always print headers
	-f		Print data as file grows
	-F		Same as -f, but keep retrying
	-s SECONDS	Wait SECONDS between reads with -f

=item B<tar>

tar c|x|t [-zJjahmvokO] [-f TARFILE] [-C DIR] [-T FILE] [-X FILE] [LONGOPT]... [FILE]...

Create, extract, or list files from a tar file

	c	Create
	x	Extract
	t	List
	-f FILE	Name of TARFILE ('-' for stdin/out)
	-C DIR	Change to DIR before operation
	-v	Verbose
	-O	Extract to stdout
	-m	Don't restore mtime
	-o	Don't restore user:group
	-k	Don't replace existing files
	-z	(De)compress using gzip
	-J	(De)compress using xz
	-j	(De)compress using bzip2
	--lzma	(De)compress using lzma
	-a	(De)compress based on extension
	-h	Follow symlinks
	-T FILE	File with names to include
	-X FILE	File with glob patterns to exclude
	--exclude PATTERN	Glob pattern to exclude
	--overwrite		Replace existing files
	--strip-components NUM	NUM of leading components to strip
	--no-recursion		Don't descend in directories
	--numeric-owner		Use numeric user:group
	--no-same-permissions	Don't restore access permissions
	--to-command COMMAND	Pipe files to COMMAND

=item B<tee>

tee [-ai] [FILE]...

Copy stdin to each FILE, and also to stdout

	-a	Append to the given FILEs, don't overwrite
	-i	Ignore interrupt signals (SIGINT)

=item B<time>

time [-vpa] [-o FILE] PROG ARGS

Run PROG, display resource usage when it exits

	-v	Verbose
	-p	POSIX output format
	-f FMT	Custom format
	-o FILE	Write result to FILE
	-a	Append (else overwrite)

=item B<top>

top [-bmH] [-n COUNT] [-d SECONDS]

Show a view of process activity in real time.
Read the status of all processes from /proc each SECONDS
and show a screenful of them.
Keys:

	N/M/P/T: show CPU usage, sort by pid/mem/cpu/time
	S: show memory
	R: reverse sort
	H: toggle threads, 1: toggle SMP
	Q,^C: exit
Options:

	-b	Batch mode
	-n N	Exit after N iterations
	-d SEC	Delay between updates
	-m	Same as 's' key
	-H	Show threads

=item B<truncate>

truncate [-c] -s SIZE FILE...

Truncate FILEs to SIZE

	-c	Do not create files
	-s SIZE

=item B<tsort>

tsort [FILE]

Topological sort

=item B<tty>

tty [-s]

Print file name of stdin's terminal

	-s	Print nothing, only return exit status

=item B<uname>

uname [-amnrspvio]

Print system information

	-a	Print all
	-m	Machine (hardware) type
	-n	Hostname
	-r	Kernel release
	-s	Kernel name (default)
	-p	Processor type
	-v	Kernel version
	-i	Hardware platform
	-o	OS name

=item B<unexpand>

unexpand [-fa][-t N] [FILE]...

Convert spaces to tabs, writing to stdout

	-a	Convert all blanks
	-f	Convert only leading blanks
	-t N	Tabstops every N chars

=item B<unix2dos>

unix2dos [-ud] [FILE]

Convert FILE in-place from Unix to DOS format.
When no file is given, use stdin/stdout.

	-u	dos2unix
	-d	unix2dos

=item B<uptime>

uptime 

Display the time since the last boot

=item B<vi>

vi [-c CMD] [-R] [-H] [FILE]...

Edit FILE

	-c CMD	Initial command to run ($EXINIT and ~/.exrc also available)
	-R	Read-only
	-H	List available features

=item B<vlock>

vlock [-a]

Lock a virtual terminal. A password is required to unlock.

	-a	Lock all VTs

=item B<watch>

watch [-n SEC] [-t] PROG ARGS

Run PROG periodically

	-n SEC	Period (default 2)
	-t	Don't print header

=item B<wget>

wget [-cqS] [--spider] [-O FILE] [-o LOGFILE] [--header STR]
	[--post-data STR | --post-file FILE] [-Y on/off]
	[--no-check-certificate] [-P DIR] [-U AGENT] [-T SEC] URL...

Retrieve files via HTTP or FTP

	--spider	Only check URL existence: $? is 0 if exists
	--header STR	Add STR (of form 'header: value') to headers
	--post-data STR	Send STR using POST method
	--post-file FILE	Send FILE using POST method
	--no-check-certificate	Don't validate the server's certificate
	-c		Continue retrieval of aborted transfer
	-q		Quiet
	-P DIR		Save to DIR (default .)
	-S    		Show server response
	-T SEC		Network read timeout is SEC seconds
	-O FILE		Save to FILE ('-' for stdout)
	-o LOGFILE	Log messages to FILE
	-U STR		Use STR for User-Agent header
	-Y on/off	Use proxy

=item B<which>

which [-a] COMMAND...

Locate COMMAND

	-a	Show all matches

=item B<xxd>

xxd [-pri] [-g N] [-c N] [-l LEN] [-s OFS] [-o OFS] [FILE]

Hex dump FILE (or stdin)

	-g N		Bytes per group
	-c N		Bytes per line
	-p		Show only hex bytes, assumes -c30
	-i		C include file style
	-l LENGTH	Show only first LENGTH bytes
	-s OFFSET	Skip OFFSET bytes
	-o OFFSET	Add OFFSET to displayed offset
	-r		Reverse (with -p, assumes no offsets in input)

=back

=head1 LIBC NSS

GNU Libc (glibc) uses the Name Service Switch (NSS) to configure the behavior
of the C library for the local environment, and to configure how it reads
system data, such as passwords and group information.  This is implemented
using an /etc/nsswitch.conf configuration file, and using one or more of the
/lib/libnss_* libraries.  BusyBox tries to avoid using any libc calls that make
use of NSS.  Some applets however, such as login and su, will use libc functions
that require NSS.

If you enable CONFIG_USE_BB_PWD_GRP, BusyBox will use internal functions to
directly access the /etc/passwd, /etc/group, and /etc/shadow files without
using NSS.  This may allow you to run your system without the need for
installing any of the NSS configuration files and libraries.

When used with glibc, the BusyBox 'networking' applets will similarly require
that you install at least some of the glibc NSS stuff (in particular,
/etc/nsswitch.conf, /lib/libnss_dns*, /lib/libnss_files*, and /lib/libresolv*).

Shameless Plug: As an alternative, one could use a C library such as uClibc.  In
addition to making your system significantly smaller, uClibc does not require the
use of any NSS support files or libraries.

=head1 MAINTAINER

Denis Vlasenko <vda.linux@googlemail.com>

=head1 AUTHORS

The following people have contributed code to BusyBox whether they know it or
not.  If you have written code included in BusyBox, you should probably be
listed here so you can obtain your bit of eternal glory.  If you should be
listed here, or the description of what you have done needs more detail, or is
incorrect, please send in an update.


=for html <br>

Emanuele Aina <emanuele.aina@tiscali.it>

    run-parts

=for html <br>

Erik Andersen <andersen@codepoet.org>

    Tons of new stuff, major rewrite of most of the
    core apps, tons of new apps as noted in header files.
    Lots of tedious effort writing these boring docs that
    nobody is going to actually read.

=for html <br>

Laurence Anderson <l.d.anderson@warwick.ac.uk>

    rpm2cpio, unzip, get_header_cpio, read_gz interface, rpm

=for html <br>

Jeff Angielski <jeff@theptrgroup.com>

    ftpput, ftpget

=for html <br>

Edward Betts <edward@debian.org>

    expr, hostid, logname, whoami

=for html <br>

John Beppu <beppu@codepoet.org>

    du, nslookup, sort

=for html <br>

Brian Candler <B.Candler@pobox.com>

    tiny-ls(ls)

=for html <br>

Randolph Chung <tausq@debian.org>

    fbset, ping, hostname

=for html <br>

Dave Cinege <dcinege@psychosis.com>

    more(v2), makedevs, dutmp, modularization, auto links file,
    various fixes, Linux Router Project maintenance

=for html <br>

Jordan Crouse <jordan@cosmicpenguin.net>

    ipcalc

=for html <br>

Magnus Damm <damm@opensource.se>

    tftp client insmod powerpc support

=for html <br>

Larry Doolittle <ldoolitt@recycle.lbl.gov>

    pristine source directory compilation, lots of patches and fixes.

=for html <br>

Glenn Engel <glenne@engel.org>

    httpd

=for html <br>

Gennady Feldman <gfeldman@gena01.com>

    Sysklogd (single threaded syslogd, IPC Circular buffer support,
    logread), various fixes.

=for html <br>

Karl M. Hegbloom <karlheg@debian.org>

    cp_mv.c, the test suite, various fixes to utility.c, &c.

=for html <br>

Daniel Jacobowitz <dan@debian.org>

    mktemp.c

=for html <br>

Matt Kraai <kraai@alumni.cmu.edu>

    documentation, bugfixes, test suite

=for html <br>

Stephan Linz <linz@li-pro.net>

    ipcalc, Red Hat equivalence

=for html <br>

John Lombardo <john@deltanet.com>

    tr

=for html <br>

Glenn McGrath <bug1@iinet.net.au>

    Common unarchiving code and unarchiving applets, ifupdown, ftpgetput,
    nameif, sed, patch, fold, install, uudecode.
    Various bugfixes, review and apply numerous patches.

=for html <br>

Manuel Novoa III <mjn3@codepoet.org>

    cat, head, mkfifo, mknod, rmdir, sleep, tee, tty, uniq, usleep, wc, yes,
    mesg, vconfig, make_directory, parse_mode, dirname, mode_string,
    get_last_path_component, simplify_path, and a number trivial libbb routines

    also bug fixes, partial rewrites, and size optimizations in
    ash, basename, cal, cmp, cp, df, du, echo, env, ln, logname, md5sum, mkdir,
    mv, realpath, rm, sort, tail, touch, uname, watch, arith, human_readable,
    interface, dutmp, ifconfig, route

=for html <br>

Vladimir Oleynik <dzo@simtreas.ru>

    cmdedit; xargs(current), httpd(current);
    ports: ash, crond, fdisk, inetd, stty, traceroute, top;
    locale, various fixes
    and irreconcilable critic of everything not perfect.

=for html <br>

Bruce Perens <bruce@pixar.com>

    Original author of BusyBox in 1995, 1996. Some of his code can
    still be found hiding here and there...

=for html <br>

Tim Riker <Tim@Rikers.org>

    bug fixes, member of fan club

=for html <br>

Kent Robotti <robotti@metconnect.com>

    reset, tons and tons of bug reports and patches.

=for html <br>

Chip Rosenthal <chip@unicom.com>, <crosenth@covad.com>

    wget - Contributed by permission of Covad Communications

=for html <br>

Pavel Roskin <proski@gnu.org>

    Lots of bugs fixes and patches.

=for html <br>

Gyepi Sam <gyepi@praxis-sw.com>

    Remote logging feature for syslogd

=for html <br>

Linus Torvalds <torvalds@transmeta.com>

    mkswap, fsck.minix, mkfs.minix

=for html <br>

Mark Whitley <markw@codepoet.org>

    grep, sed, cut, xargs(previous),
    style-guide, new-applet-HOWTO, bug fixes, etc.

=for html <br>

Charles P. Wright <cpwright@villagenet.com>

    gzip, mini-netcat(nc)

=for html <br>

Enrique Zanardi <ezanardi@ull.es>

    tarcat (since removed), loadkmap, various fixes, Debian maintenance

=for html <br>

Tito Ragusa <farmatito@tiscali.it>

    devfsd and size optimizations in strings, openvt and deallocvt.

=for html <br>

Paul Fox <pgf@foxharp.boston.ma.us>

    vi editing mode for ash, various other patches/fixes

=for html <br>

Roberto A. Foglietta <me@roberto.foglietta.name>

    port: dnsd

=for html <br>

Bernhard Reutner-Fischer <rep.dot.nop@gmail.com>

    misc

=for html <br>

Mike Frysinger <vapier@gentoo.org>

    initial e2fsprogs, printenv, setarch, sum, misc

=for html <br>

Jie Zhang <jie.zhang@analog.com>

    fixed two bugs in msh and hush (exitcode of killed processes)

=cut
